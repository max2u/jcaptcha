<?xml version="1.0" encoding="ISO-8859-1"?>
<project>

  <!-- the version of maven's project object model -->
  <pomVersion>3</pomVersion>
  
  <!-- a unique name for this project -->
  <id>jcaptcha-j2ee</id>
  
  <!-- a short but descriptive name for the project -->
  <name>jcaptcha-j2ee</name>
  
  <groupId>jcaptcha</groupId>
  
  <!-- The version of the project under development, e.g.
       1.1, 1.2, 2.0-SNAPSHOT -->
  <currentVersion>1.0-SNAPSHOT</currentVersion>
  
  <!-- details about the organization that 'owns' the project -->
  <organization>
    <!-- The full name of the organization. -->
    <name>JCaptcha corp.</name>
    <!-- The URL to the organization's home page. -->
    <url>http://jcaptcha.sourceforge.net/</url>
    <!-- The URL to the organization's logo image. This can be an URL relative to the base directory of the generated
         web site, (e.g., /images/org-logo.png) or an absolute URL (e.g., http://my.corp/logo.png). This value is used
         when generating the project documentation. -->
    <logo>/images/organization-logo.jpg</logo>
  </organization>
  
  <!-- the year the project started -->
  <inceptionYear>2003</inceptionYear>
  
  <!-- The Java package name of the project. This value is used when generating JavaDoc. -->
  <package>com.octo.captcha.j2ee</package>
  
  <!-- The URL to the project's logo image. This can be an URL relative to the base directory of the generated web site,
      (e.g., /images/project-logo.png) or an absolute URL (e.g., http://my.corp/project-logo.png). This is used when 
      generating the project documentation.-->
  <logo>/images/project-logo.jpg</logo>

  <!-- Optional. A detailed description of the project. This element is usually specified as CDATA to enable the use of HTML
       tags within the description. This description is used to generate the front page of the project's web site.-->
  <description>
  <![CDATA[
    A <B>JCaptcha</B> sub project which aims to provide components that eases integration of captchas in J2EE Applications.
    <P>
    Version 1.0 provides the <B>PixCaptchaFilter</B> component, a J2EE Filter that eases the inclusion of pix captchas in existing
    J2EE MVC web applications.
    </P>
    <P>
    For more informations, download the <A HREF="http://where.is.thedoc">PixCaptchaFilter Manual</A>.
    </P>
  ]]>
  </description>
  <!-- a short description of what the project does -->
  <shortDescription>
    A JCaptcha sub project which aims to provide components that eases integration of captchas in J2EE Applications
  </shortDescription>

  <!-- the url to the project home page -->
  <url>http://jcaptcha.sourceforge.net</url>
  
  <!-- Optional. The URL to the project's issue tracking system. -->
  <issueTrackingUrl>http://sourceforge.net/tracker/?group_id=97877</issueTrackingUrl>

  <!-- Optional. The hostname of the web server that hosts the project's web site. This is used when the web site is deployed. -->
  <siteAddress>cvs.sourceforge.net</siteAddress>
  
  <!-- Optional. The directory on the web server where the public web site for this project resides. This is used when the web site is deployed. -->
  <siteDirectory>/Jcaptcha</siteDirectory>

  <!-- Optional. The server server where the final distributions will be published. This is used when the distributions are deployed.
       If this isn't defined, the central repository is used instead as determined by maven.repo.central and maven.repo.central.directory
   -->
  <distributionDirectory>distribs.sourceforge.net</distributionDirectory>

  <!-- Information relating to the source configuration management system used by this project. -->
  <repository>
    <!-- Optional. The source configuration management system URL that describes the repository and how to connect to the repository. 
         This is used by Maven when building versions from specific ID. The format of this element is as follows: scm:<provider>:<provider-parameters>
         For cvs, the format for pserver repositories should be: 
             scm:cvs:pserver:user@host:/cvs/root:module-name
         For local networked repositories (eg. pserver to local machine) 
             scm:cvs:lserver:user@host:/cvs/root:module-name
         For ssh access: 
             scm:cvs:ext:user@host:/cvs/root:module-nameRemember that CVS will expect an environment variable called CVS_RSH to be set, typically to ssh
             or your ssh client. 
         Some cvs clients support other protocols, such as ntserver and extssh. Here's an example using CVS NT and ntserver: 
         scm|cvs|ntserver|user@server|e:\cvs|DeploymentNote the use of the vertical bar as delimiter as the repository has a colon (:) in it. 
         For local file system repositories 
             scm:cvs:local:ignored:/cvs/root:module-name
         The delimiter is determined by the character after "scm". eg. scm|cvs|pserver|user@host|/cvs/root|module-name is equivalent to that listed above.
         This can be useful for Windows users who have : in their cvsroot parameter (eg. D:\cvsroot) 
         Where pserver is the protocol used to access CVS, user@host is the user name to log in to the specified cvs host, /cvs/root is the cvs root directory, 
         and module-name is the name of the cvs module to be worked on 
         As an example, the settings for an Apache project are usually: 
             scm:cvs:pserver:anoncvs@cvs.apache.org:/home/cvspublic:module-name
         Currently CVS, Starteam and SubVersion are the only supported scm's. Others will be added as soon as possible 
    -->
    <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/jcaptcha:j2ee</connection>
    <!-- Optional. Just like connection, but for developers, i.e. this scm connection will not be read only. -->
    <developerConnection/>
    <!-- Optional. The URL to the project's browsable CVS repository -->
    <url>http://cvs.sourceforge.net/viewcvs.py/jcaptcha/</url>
  </repository>

  <!-- Optional. Contains information on previous versions of the project. This information is used when invoking the maven:dist target. -->
  <versions>
    <!-- A unique identifier for a version. This ID is used to specify the version that maven:dist builds. -->
    <id/>
    <!-- The external version number under which this release was distributed. Examples include: 1.0, 1.1-alpha1, 1.2-beta, 1.3.2 etc. -->
    <name/>
    <!-- The name given in the version control system (e.g. cvs) used by the project for the source code associated with this version of the project.-->
    <tag/>
  </versions>
  
  <!-- Optional. Contains information on branches of the project. This information is used when invoking the maven:dist target. Each branch
       is described by a tag element-->
  <branches>
    <!-- The branch tag in the version control system (e.g. cvs) used by the project for the source code associated with this branch of the project. -->
    <tag/>
  </branches>

  <!-- Contains information about a project's mailing lists. This is used to generate the front page of the site's web site. -->
  <mailingLists>
    <!-- Each mailing list is described by a mailingList element, which is then described by additional elements (described below). 
         The auto-generated site documentation references this information. -->
    <mailingList>
      <!-- The name of the mailing list. -->
      <name>JCaptcha User List</name>
      <!-- The email address or link that can be used to subscribe to the mailing list. If this is an email address, a mailto: link will automatically
           be created when the documentation is created.-->
      <subscribe>jcaptcha-users@lists.sourceforge.net</subscribe>
      <!-- The email address or link that can be used to unsubscribe to the mailing list. If this is an email address, a mailto: link will automatically 
           be created when the documentation is created.-->
      <unsubscribe>jcaptcha-users-unsubscribe@lists.sourceforge.net</unsubscribe>
      <!-- The link to a URL that can browse the archive. -->
      <archive>http://sourceforge.net/mailarchive/forum.php?forum=jcaptcha-users</archive>
    </mailingList>
    <mailingList>
      <name>JCaptcha Developer List</name>
      <subscribe>jcaptcha-devs@lists.sourceforge.net</subscribe>
      <unsubscribe>jcaptcha-devs-unsubscribe@lists.sourceforge.net</unsubscribe>
      <archive>http://sourceforge.net/mailarchive/forum.php?forum=jcaptcha-devs</archive>
    </mailingList>
  </mailingLists>
  
  <!-- Describes the committers to a project. This is used to generate the Project Team page of the project's web site. -->
  <developers>
    <!-- Each developer is described by a developer element, which is then described by additional elements (described below). 
         The auto-generated site documentation references this information.-->
    <developer>
      <!-- The full name of the developer. -->
      <name>Sebastien Brunot</name>
      <!-- The username of the developer. -->
      <id>sbr</id>
      <!-- The email address of the developer. -->
      <email>sbrunot@octo.com</email>
      <!-- The organization to which the developer belongs.-->
      <organization>Octo Technology</organization>
      <!-- The roles the developer plays in the project. Each role is describe by a role element, the body of which is a role name. -->
      <roles>
        <role>developer</role>
      </roles>
      <!-- The URL for the homepage of the developer -->
      <url/>
      <!-- The timezone the developer is in. This is a number in the range -14 to 14. -->
      <timezone>1</timezone>
    </developer>
    <developer>
      <name>Marc Antoine Guarrigues</name>
      <id>mag</id>
      <email>mguarrigue@octo.com</email>
      <organization>Octo Technology</organization>
      <roles>
        <role>developer</role>
      </roles>
      <url/>
      <timezone>1</timezone>
    </developer>
    <developer>
      <name>Mathieu Gandin</name>
      <id>mga</id>
      <email>mgandin@octo.com</email>
      <organization>Octo Technology</organization>
      <roles>
        <role>developer</role>
      </roles>
      <url/>
      <timezone>1</timezone>
    </developer>
  </developers>

  <!-- Describes the contributors to a project. This is used to generate the Project Team page of the project's web site.
       Same as <developers> but with <contributor> tags -->
  <contributors/>
  
  <!-- Describes the licenses for this project. This is used to generate the License page of the project's web site.
       Typically the licenses listed for the project are that of the project itself, and not of dependencies.-->
  <licences>
    <!-- Each license is described by a license element, which is then describe by additional elements (described below).
         The auto-generated site documentation references this information. Projects should only list the license(s) that
         applies to the project and not the licenses that apply to dependencies.-->
    <licence>
      <!-- The full legal name of the license. -->
      <name/>
      <!-- The official url for the license text. -->
      <url/>
      <!-- The primary method by which this project may be distributed. 
            repo : may be downloaded from the Maven repository 
            manual : user must manually download and install the dependency.-->
      <distribution>repo</distribution>
    </licence>
  </licences>
  
  <!-- Describes the dependencies to a project. This is used to when building a project. -->
  <dependencies>
    <!-- Each dependency is described by a dependency element, which is then described by additional elements (described below).
         These dependencies are used to construct a classpath for your project during the build process. 
         Maven can automatically download these dependencies from a remote repository. 
         The filename that Maven downloads from the repository is artifactId-version.jar where artifactId corresponds to the 
         artifactId element and version corresponds to the version element. 
         When Maven goes looking for a dependency in the remote repository, it uses the dependency element to construct the URL 
         to download from. This URL is defined as: 
           ${repo}/${groupId}/${type}s/${artifactId}-${version}.${type}
         Where 
           repo is the remote repository URL specified by ${maven.repo.remote} 
           groupId is taken from the dependency element 
           type is taken from the dependency element 
           artifactId is taken from the dependency element 
           version is taken from the dependency element 
    -->
    <dependency>
      <!-- The project group that produced the dependency, e.g. jboss. -->
      <groupId>jcaptcha</groupId>
      <!-- The unique id for an artifact produced by the project group, e.g. jboss-boot -->
      <artifactId>jcaptcha-core</artifactId>
      <!-- The version of the dependency., e.g. 3.2.1 -->
      <version>1.0</version>
      <!-- The name of jar file if it doesn't respect <artifactId>-<version>.jar pattern.-->
      <jar/>
      <!-- The type of dependency. This defaults to jar. 
           Other known and recognised dependency types are: ejb and plugin. -->
      <type/>
      <!-- The url of the dependency's homepage. 
           This url will be provided to the user if the jar file cannot be downloaded from the central repository. -->
      <url>http://jcaptcha.sourceforge.net</url>
      <!-- Properties about the dependency. Various plugins allow you to mark dependencies with properties. For example 
           the war plugin looks for a war.bundle property, and if found will include the dependency in WEB-INF/lib. 
           For example syntax, check the war plugin docs. -->
      <properties/>
    </dependency>
    <dependency>
      <groupId>servletapi</groupId>
      <artifactId>servletapi</artifactId>
      <version>2.3</version>
      <jar/>
      <type/>
      <url>http://java.sun.com</url>
      <properties/>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.0.3</version>
      <jar/>
      <type/>
      <url>http://java.sun.com</url>
      <properties/>
    </dependency>
    <dependency>
      <groupId>jboss</groupId>
      <artifactId>jboss-jmx</artifactId>
      <version>3.2.1</version>
      <jar/>
      <type/>
      <url>http://www.jboss.org</url>
      <properties/>
    </dependency>
  </dependencies>
  
  <!-- build information for the project -->
  <build>
    <!-- An address to which notifications regarding the status of builds for this project can be sent.
         This is intended for use by tools which do unattended builds, for example those providing for 
         continuous integration. Currently this is used by the maven:gump-descriptor target -->
    <nagEmailAddress>sbrunot@octo.com</nagEmailAddress>
    <!-- This element specifies a directory containing the source of the project. The generated build system 
         will compile the source in this directory when the project is built. The path given is relative to 
         the project descriptor. -->
    <sourceDirectory>src/java</sourceDirectory>
    <!-- This element specifies how source code will be excluded or included depending on the presence of a given
         class.-->
    <sourceModification>
      <!-- If the class with this name can not be loaded, then the includes and excludes specified below will be 
           applied to the contents of the sourceDirectory
           Note: not all plugins support the sourceModifications element. -->
      <className/>
      <!-- Describe the files to be included if the class was not found -->
      <includes>
        <!-- This element specifies an Ant pattern of files to include in a list. -->
        <include/>
      </includes>
      <!-- Describe the files to be excluded if the class was not found -->
      <excludes>
        <!-- This element specifies an Ant pattern of files to exclude from a list. -->
        <exclude/>
      </excludes>
    </sourceModification>
    <!-- This element specifies a directory containing the unit test source of the project.
         The generated build system will compile these directories when the project is being tested.
         The unit tests must use the JUnit test framework. The path given is relative to the project descriptor.-->
    <unitTestSourceDirectory>src/test</unitTestSourceDirectory>
    <!-- This element specifies a directory containing Aspect sources of the project. The generated build system will 
         compile the Aspects in this directory when the project is built if Aspects have been enabled (see the Aspectj 
         goals document). The path given is relative to the project descriptor. -->
    <aspectSourceDirectory/>
    <!-- This element specifies unit tests associated with the project.-->
    <unitTest>
      <!-- Describe the includes unit tests -->
      <includes>
        <!-- This element specifies an Ant pattern of files to include in a list. -->
        <include>**/*Test.java</include>
      </includes>
      <!-- Describe the excludes unit tests -->
      <excludes>
        <!-- This element specifies an Ant pattern of files to exclude from a list. -->
        <exclude/>
      </excludes>
    </unitTest>
    <!-- This element describes all of the resources associated with a project or unit tests. Each resource is described
         by a resource element, which is then described by additional elements (described below). These resources are 
         used to complete the jar file or to run unit test. -->
    <resources>
      <!-- Each resource must be defined in a resource element. -->
      <resource>
        <!-- Describe the directory where the resource is stored. The path may be absolute, or relative to the project.xml file. -->
        <directory>src/conf</directory>
        <!-- Describe the resource target path. For example, if you want that resource appear into a specific package 
            (org.apache.maven.messages), you must specify this element with this value : org/apache/maven/messages  -->
        <targetPath/>
        <!-- Describe the includes files to the project -->
        <includes>
          <!-- This element specifies an Ant pattern of files to include in a list. -->
          <include>**/*.*</include>
        </includes>
        <!-- Describe the excludes files to the project -->
        <excludes>
          <!-- This element specifies an Ant pattern of files to exclude in a list. -->
          <exclude/>
        </excludes>
        <!-- Boolean. Describe if resources are filtered or not. -->
        <filtering/>
      </resource>
    </resources>
  </build>

  <!-- This element includes the specification of reports to be included in a Maven-generated site. These reports will 
       be run when a user executes maven site. All of the reports will be included in the navigation bar for browsing 
       in the order they are specified. -->
  <reports>
    <!-- The name of the report that should be run when the site is generated. There is an established naming convention
         that is to be used when specifying reports. If you want the report that is generated by a plugin called xyz, then 
         you would specify the following for the value of this element: maven-xyz-plugin.-->
    <report>maven-changelog-plugin</report>
    <report>maven-file-activity-plugin</report>
    <report>maven-checkstyle-plugin</report>
    <report>maven-junit-report-plugin</report>
    <report>maven-javadoc-plugin</report>
    <report>maven-jxr-plugin</report>
    <report>maven-license-plugin</report>
    <report>maven-pmd-plugin</report>
    <report>maven-jdepend-plugin</report>
    <report>maven-tasklist-plugin</report>
    <report>maven-clover-plugin</report>
  </reports>
  
  <!-- Project properties that will be used by various plugins -->
  <properties/>
</project>

